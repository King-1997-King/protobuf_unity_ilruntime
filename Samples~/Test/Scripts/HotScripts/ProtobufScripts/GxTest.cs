// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protoFiles/gx_test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GxTest {

  /// <summary>Holder for reflection information generated from protoFiles/gx_test.proto</summary>
  public static partial class GxTestReflection {

    #region Descriptor
    /// <summary>File descriptor for protoFiles/gx_test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GxTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhwcm90b0ZpbGVzL2d4X3Rlc3QucHJvdG8SB2d4X3Rlc3Qi4AIKB2d4X2Rh",
            "dGESEQoJc2NfZG91YmxlGAEgASgBEhAKCHNjX2Zsb2F0GAIgASgCEhAKCHNj",
            "X2ludDMyGAMgASgFEhAKCHNjX2ludDY0GAQgASgDEhEKCXNjX3VpbnQzMhgF",
            "IAEoDRIRCglzY191aW50NjQYBiABKAQSEQoJc2Nfc2ludDMyGAcgASgREhEK",
            "CXNjX3NpbnQ2NBgIIAEoEhISCgpzY19maXhlZDMyGAkgASgHEhIKCnNjX2Zp",
            "eGVkNjQYCiABKAYSEwoLc2Nfc2ZpeGVkMzIYCyABKA8SEwoLc2Nfc2ZpeGVk",
            "NjQYDCABKBASDwoHc2NfYm9vbBgNIAEoCBIRCglzY19zdHJpbmcYDiABKAkS",
            "EAoIc2NfYnl0ZXMYDyABKAwSGgoCbWoYECADKAsyDi5neF90ZXN0Lm1hanVu",
            "EhwKA2VubRgRIAEoDjIPLmd4X3Rlc3QubWpFbnVtIncKBW1hanVuEgkKAWYY",
            "ASADKAISCQoBaRgCIAEoBRIgCgFtGAMgAygLMhUuZ3hfdGVzdC5tYWp1bi5N",
            "RW50cnkaNgoGTUVudHJ5EgsKA2tleRgBIAEoBRIbCgV2YWx1ZRgCIAEoCzIM",
            "Lmd4X3Rlc3QudmFsOgI4ASIbCgN2YWwSCQoBYRgBIAEoBRIJCgFiGAIgASgJ",
            "KloKBm1qRW51bRINCglVTklWRVJTQUwQABIHCgNXRUIQARIKCgZJTUFHRVMQ",
            "AhIJCgVMT0NBTBADEggKBE5FV1MQBBIMCghQUk9EVUNUUxAFEgkKBVZJREVP",
            "EAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GxTest.mjEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GxTest.gx_data), global::GxTest.gx_data.Parser, new[]{ "ScDouble", "ScFloat", "ScInt32", "ScInt64", "ScUint32", "ScUint64", "ScSint32", "ScSint64", "ScFixed32", "ScFixed64", "ScSfixed32", "ScSfixed64", "ScBool", "ScString", "ScBytes", "Mj", "Enm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GxTest.majun), global::GxTest.majun.Parser, new[]{ "F", "I", "M" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::GxTest.val), global::GxTest.val.Parser, new[]{ "A", "B" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum mjEnum {
    [pbr::OriginalName("UNIVERSAL")] Universal = 0,
    [pbr::OriginalName("WEB")] Web = 1,
    [pbr::OriginalName("IMAGES")] Images = 2,
    [pbr::OriginalName("LOCAL")] Local = 3,
    [pbr::OriginalName("NEWS")] News = 4,
    [pbr::OriginalName("PRODUCTS")] Products = 5,
    [pbr::OriginalName("VIDEO")] Video = 6,
  }

  #endregion

  #region Messages
  public sealed partial class gx_data : pb::IMessage<gx_data> {
    private static readonly pb::MessageParser<gx_data> _parser = new pb::MessageParser<gx_data>(() => new gx_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GxTest.GxTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gx_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gx_data(gx_data other) : this() {
      scDouble_ = other.scDouble_;
      scFloat_ = other.scFloat_;
      scInt32_ = other.scInt32_;
      scInt64_ = other.scInt64_;
      scUint32_ = other.scUint32_;
      scUint64_ = other.scUint64_;
      scSint32_ = other.scSint32_;
      scSint64_ = other.scSint64_;
      scFixed32_ = other.scFixed32_;
      scFixed64_ = other.scFixed64_;
      scSfixed32_ = other.scSfixed32_;
      scSfixed64_ = other.scSfixed64_;
      scBool_ = other.scBool_;
      scString_ = other.scString_;
      scBytes_ = other.scBytes_;
      mj_ = other.mj_.Clone();
      enm_ = other.enm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public gx_data Clone() {
      return new gx_data(this);
    }

    /// <summary>Field number for the "sc_double" field.</summary>
    public const int ScDoubleFieldNumber = 1;
    private double scDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScDouble {
      get { return scDouble_; }
      set {
        scDouble_ = value;
      }
    }

    /// <summary>Field number for the "sc_float" field.</summary>
    public const int ScFloatFieldNumber = 2;
    private float scFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScFloat {
      get { return scFloat_; }
      set {
        scFloat_ = value;
      }
    }

    /// <summary>Field number for the "sc_int32" field.</summary>
    public const int ScInt32FieldNumber = 3;
    private int scInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScInt32 {
      get { return scInt32_; }
      set {
        scInt32_ = value;
      }
    }

    /// <summary>Field number for the "sc_int64" field.</summary>
    public const int ScInt64FieldNumber = 4;
    private long scInt64_;
    /// <summary>
    ///long
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScInt64 {
      get { return scInt64_; }
      set {
        scInt64_ = value;
      }
    }

    /// <summary>Field number for the "sc_uint32" field.</summary>
    public const int ScUint32FieldNumber = 5;
    private uint scUint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScUint32 {
      get { return scUint32_; }
      set {
        scUint32_ = value;
      }
    }

    /// <summary>Field number for the "sc_uint64" field.</summary>
    public const int ScUint64FieldNumber = 6;
    private ulong scUint64_;
    /// <summary>
    ///ulong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScUint64 {
      get { return scUint64_; }
      set {
        scUint64_ = value;
      }
    }

    /// <summary>Field number for the "sc_sint32" field.</summary>
    public const int ScSint32FieldNumber = 7;
    private int scSint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScSint32 {
      get { return scSint32_; }
      set {
        scSint32_ = value;
      }
    }

    /// <summary>Field number for the "sc_sint64" field.</summary>
    public const int ScSint64FieldNumber = 8;
    private long scSint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScSint64 {
      get { return scSint64_; }
      set {
        scSint64_ = value;
      }
    }

    /// <summary>Field number for the "sc_fixed32" field.</summary>
    public const int ScFixed32FieldNumber = 9;
    private uint scFixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScFixed32 {
      get { return scFixed32_; }
      set {
        scFixed32_ = value;
      }
    }

    /// <summary>Field number for the "sc_fixed64" field.</summary>
    public const int ScFixed64FieldNumber = 10;
    private ulong scFixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScFixed64 {
      get { return scFixed64_; }
      set {
        scFixed64_ = value;
      }
    }

    /// <summary>Field number for the "sc_sfixed32" field.</summary>
    public const int ScSfixed32FieldNumber = 11;
    private int scSfixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScSfixed32 {
      get { return scSfixed32_; }
      set {
        scSfixed32_ = value;
      }
    }

    /// <summary>Field number for the "sc_sfixed64" field.</summary>
    public const int ScSfixed64FieldNumber = 12;
    private long scSfixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScSfixed64 {
      get { return scSfixed64_; }
      set {
        scSfixed64_ = value;
      }
    }

    /// <summary>Field number for the "sc_bool" field.</summary>
    public const int ScBoolFieldNumber = 13;
    private bool scBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScBool {
      get { return scBool_; }
      set {
        scBool_ = value;
      }
    }

    /// <summary>Field number for the "sc_string" field.</summary>
    public const int ScStringFieldNumber = 14;
    private string scString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScString {
      get { return scString_; }
      set {
        scString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sc_bytes" field.</summary>
    public const int ScBytesFieldNumber = 15;
    private pb::ByteString scBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScBytes {
      get { return scBytes_; }
      set {
        scBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mj" field.</summary>
    public const int MjFieldNumber = 16;
    private static readonly pb::FieldCodec<global::GxTest.majun> _repeated_mj_codec
        = pb::FieldCodec.ForMessage(130, global::GxTest.majun.Parser);
    private readonly pbc::RepeatedField<global::GxTest.majun> mj_ = new pbc::RepeatedField<global::GxTest.majun>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GxTest.majun> Mj {
      get { return mj_; }
    }

    /// <summary>Field number for the "enm" field.</summary>
    public const int EnmFieldNumber = 17;
    private global::GxTest.mjEnum enm_ = global::GxTest.mjEnum.Universal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTest.mjEnum Enm {
      get { return enm_; }
      set {
        enm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as gx_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(gx_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScDouble, other.ScDouble)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScFloat, other.ScFloat)) return false;
      if (ScInt32 != other.ScInt32) return false;
      if (ScInt64 != other.ScInt64) return false;
      if (ScUint32 != other.ScUint32) return false;
      if (ScUint64 != other.ScUint64) return false;
      if (ScSint32 != other.ScSint32) return false;
      if (ScSint64 != other.ScSint64) return false;
      if (ScFixed32 != other.ScFixed32) return false;
      if (ScFixed64 != other.ScFixed64) return false;
      if (ScSfixed32 != other.ScSfixed32) return false;
      if (ScSfixed64 != other.ScSfixed64) return false;
      if (ScBool != other.ScBool) return false;
      if (ScString != other.ScString) return false;
      if (ScBytes != other.ScBytes) return false;
      if(!mj_.Equals(other.mj_)) return false;
      if (Enm != other.Enm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScDouble != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScDouble);
      if (ScFloat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScFloat);
      if (ScInt32 != 0) hash ^= ScInt32.GetHashCode();
      if (ScInt64 != 0L) hash ^= ScInt64.GetHashCode();
      if (ScUint32 != 0) hash ^= ScUint32.GetHashCode();
      if (ScUint64 != 0UL) hash ^= ScUint64.GetHashCode();
      if (ScSint32 != 0) hash ^= ScSint32.GetHashCode();
      if (ScSint64 != 0L) hash ^= ScSint64.GetHashCode();
      if (ScFixed32 != 0) hash ^= ScFixed32.GetHashCode();
      if (ScFixed64 != 0UL) hash ^= ScFixed64.GetHashCode();
      if (ScSfixed32 != 0) hash ^= ScSfixed32.GetHashCode();
      if (ScSfixed64 != 0L) hash ^= ScSfixed64.GetHashCode();
      if (ScBool != false) hash ^= ScBool.GetHashCode();
      if (ScString.Length != 0) hash ^= ScString.GetHashCode();
      if (ScBytes.Length != 0) hash ^= ScBytes.GetHashCode();
      hash ^= mj_.GetHashCode();
      if (Enm != global::GxTest.mjEnum.Universal) hash ^= Enm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScDouble != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ScDouble);
      }
      if (ScFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ScFloat);
      }
      if (ScInt32 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScInt32);
      }
      if (ScInt64 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ScInt64);
      }
      if (ScUint32 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScUint32);
      }
      if (ScUint64 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ScUint64);
      }
      if (ScSint32 != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(ScSint32);
      }
      if (ScSint64 != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScSint64);
      }
      if (ScFixed32 != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(ScFixed32);
      }
      if (ScFixed64 != 0UL) {
        output.WriteRawTag(81);
        output.WriteFixed64(ScFixed64);
      }
      if (ScSfixed32 != 0) {
        output.WriteRawTag(93);
        output.WriteSFixed32(ScSfixed32);
      }
      if (ScSfixed64 != 0L) {
        output.WriteRawTag(97);
        output.WriteSFixed64(ScSfixed64);
      }
      if (ScBool != false) {
        output.WriteRawTag(104);
        output.WriteBool(ScBool);
      }
      if (ScString.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ScString);
      }
      if (ScBytes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(ScBytes);
      }
      mj_.WriteTo(output, _repeated_mj_codec);
      if (Enm != global::GxTest.mjEnum.Universal) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Enm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScDouble != 0D) {
        size += 1 + 8;
      }
      if (ScFloat != 0F) {
        size += 1 + 4;
      }
      if (ScInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScInt32);
      }
      if (ScInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScInt64);
      }
      if (ScUint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScUint32);
      }
      if (ScUint64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScUint64);
      }
      if (ScSint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScSint32);
      }
      if (ScSint64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScSint64);
      }
      if (ScFixed32 != 0) {
        size += 1 + 4;
      }
      if (ScFixed64 != 0UL) {
        size += 1 + 8;
      }
      if (ScSfixed32 != 0) {
        size += 1 + 4;
      }
      if (ScSfixed64 != 0L) {
        size += 1 + 8;
      }
      if (ScBool != false) {
        size += 1 + 1;
      }
      if (ScString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScString);
      }
      if (ScBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScBytes);
      }
      size += mj_.CalculateSize(_repeated_mj_codec);
      if (Enm != global::GxTest.mjEnum.Universal) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Enm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(gx_data other) {
      if (other == null) {
        return;
      }
      if (other.ScDouble != 0D) {
        ScDouble = other.ScDouble;
      }
      if (other.ScFloat != 0F) {
        ScFloat = other.ScFloat;
      }
      if (other.ScInt32 != 0) {
        ScInt32 = other.ScInt32;
      }
      if (other.ScInt64 != 0L) {
        ScInt64 = other.ScInt64;
      }
      if (other.ScUint32 != 0) {
        ScUint32 = other.ScUint32;
      }
      if (other.ScUint64 != 0UL) {
        ScUint64 = other.ScUint64;
      }
      if (other.ScSint32 != 0) {
        ScSint32 = other.ScSint32;
      }
      if (other.ScSint64 != 0L) {
        ScSint64 = other.ScSint64;
      }
      if (other.ScFixed32 != 0) {
        ScFixed32 = other.ScFixed32;
      }
      if (other.ScFixed64 != 0UL) {
        ScFixed64 = other.ScFixed64;
      }
      if (other.ScSfixed32 != 0) {
        ScSfixed32 = other.ScSfixed32;
      }
      if (other.ScSfixed64 != 0L) {
        ScSfixed64 = other.ScSfixed64;
      }
      if (other.ScBool != false) {
        ScBool = other.ScBool;
      }
      if (other.ScString.Length != 0) {
        ScString = other.ScString;
      }
      if (other.ScBytes.Length != 0) {
        ScBytes = other.ScBytes;
      }
      mj_.Add(other.mj_);
      if (other.Enm != global::GxTest.mjEnum.Universal) {
        Enm = other.Enm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ScDouble = input.ReadDouble();
            break;
          }
          case 21: {
            ScFloat = input.ReadFloat();
            break;
          }
          case 24: {
            ScInt32 = input.ReadInt32();
            break;
          }
          case 32: {
            ScInt64 = input.ReadInt64();
            break;
          }
          case 40: {
            ScUint32 = input.ReadUInt32();
            break;
          }
          case 48: {
            ScUint64 = input.ReadUInt64();
            break;
          }
          case 56: {
            ScSint32 = input.ReadSInt32();
            break;
          }
          case 64: {
            ScSint64 = input.ReadSInt64();
            break;
          }
          case 77: {
            ScFixed32 = input.ReadFixed32();
            break;
          }
          case 81: {
            ScFixed64 = input.ReadFixed64();
            break;
          }
          case 93: {
            ScSfixed32 = input.ReadSFixed32();
            break;
          }
          case 97: {
            ScSfixed64 = input.ReadSFixed64();
            break;
          }
          case 104: {
            ScBool = input.ReadBool();
            break;
          }
          case 114: {
            ScString = input.ReadString();
            break;
          }
          case 122: {
            ScBytes = input.ReadBytes();
            break;
          }
          case 130: {
            mj_.AddEntriesFrom(input, _repeated_mj_codec);
            break;
          }
          case 136: {
            Enm = (global::GxTest.mjEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class majun : pb::IMessage<majun> {
    private static readonly pb::MessageParser<majun> _parser = new pb::MessageParser<majun>(() => new majun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<majun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GxTest.GxTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public majun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public majun(majun other) : this() {
      f_ = other.f_.Clone();
      i_ = other.i_;
      m_ = other.m_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public majun Clone() {
      return new majun(this);
    }

    /// <summary>Field number for the "f" field.</summary>
    public const int FFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_f_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> f_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> F {
      get { return f_; }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 2;
    private int i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 3;
    private static readonly pbc::MapField<int, global::GxTest.val>.Codec _map_m_codec
        = new pbc::MapField<int, global::GxTest.val>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::GxTest.val.Parser), 26);
    private readonly pbc::MapField<int, global::GxTest.val> m_ = new pbc::MapField<int, global::GxTest.val>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::GxTest.val> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as majun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(majun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!f_.Equals(other.f_)) return false;
      if (I != other.I) return false;
      if (!M.Equals(other.M)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= f_.GetHashCode();
      if (I != 0) hash ^= I.GetHashCode();
      hash ^= M.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      f_.WriteTo(output, _repeated_f_codec);
      if (I != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(I);
      }
      m_.WriteTo(output, _map_m_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += f_.CalculateSize(_repeated_f_codec);
      if (I != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      size += m_.CalculateSize(_map_m_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(majun other) {
      if (other == null) {
        return;
      }
      f_.Add(other.f_);
      if (other.I != 0) {
        I = other.I;
      }
      m_.Add(other.m_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            f_.AddEntriesFrom(input, _repeated_f_codec);
            break;
          }
          case 16: {
            I = input.ReadInt32();
            break;
          }
          case 26: {
            m_.AddEntriesFrom(input, _map_m_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class val : pb::IMessage<val> {
    private static readonly pb::MessageParser<val> _parser = new pb::MessageParser<val>(() => new val());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<val> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GxTest.GxTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public val() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public val(val other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public val Clone() {
      return new val(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private string b_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string B {
      get { return b_; }
      set {
        b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as val);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(val other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B.Length != 0) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(val other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B.Length != 0) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 18: {
            B = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
